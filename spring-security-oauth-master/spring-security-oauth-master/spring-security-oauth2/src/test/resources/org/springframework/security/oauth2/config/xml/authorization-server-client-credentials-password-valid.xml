<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xmlns:b="http://www.springframework.org/schema/beans"
		 xmlns:mvc="http://www.springframework.org/schema/mvc"
		 xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
		 xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
							http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
							http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

	<http auto-config="true" use-expressions="true" authentication-manager-ref="clientsAuthenticationManager">
		<intercept-url pattern="/" access="authenticated"/>

		<!--
		This is a hack so we can get the associated tests to pass in the 'default' profile and 'spring5' profile.
		The 'default' profile uses spring-security-3.2.10.RELEASE where CSRF protection is enabled by explicitly specifying the <csrf> element.
		The 'spring5' profile uses spring-security-5.0.0.BUILD-SNAPSHOT where CSRF protection is enabled by default.
		The tests associated with this context make POST requests to /oauth/token
		so the CSRF filter will throw an exception if the CSRF token is not in the request.
		The tests fail when running against the 'spring5' profile.
		So in order to work around this, we override the default RequestMatcher with a different path.
		NOTE: spring-security-5.0.0.BUILD-SNAPSHOT provides a 'disabled' attribute on the <csrf> element
		but it's not available in spring-security-3.2.10.RELEASE. This would have been a cleaner option.
		Instead, we leverage 'request-matcher-ref' attribute as it's available in both versions.
		This is not elegant but it works.
		-->
		<csrf request-matcher-ref="csrfRequestMatcher" />
	</http>

	<b:bean id="csrfRequestMatcher" class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
		<b:constructor-arg value="/csrf-protected-path" />
	</b:bean>

	<authentication-manager id="clientsAuthenticationManager">
		<authentication-provider user-service-ref="clientDetailsUserDetailsService" />
	</authentication-manager>

	<b:bean id="clientDetailsUserDetailsService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<b:constructor-arg ref="clientDetailsService" />
	</b:bean>

	<oauth2:client-details-service id="clientDetailsService">
		<oauth2:client client-id="acme" secret="secret" authorized-grant-types="client_credentials,password" scope="openid" authorities="ROLE_ADMIN" />
	</oauth2:client-details-service>

	<authentication-manager id="usersAuthenticationManager">
		<authentication-provider>
			<user-service>
				<user name="acme" password="password" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>

	<mvc:annotation-driven/>

	<oauth2:authorization-server client-details-service-ref="clientDetailsService">
		<oauth2:client-credentials />
		<oauth2:password authentication-manager-ref="usersAuthenticationManager"  />
	</oauth2:authorization-server>

</b:beans>